Clustering을 이용한 영화 추천

- 사용한 데이터셋 : Movielens 1M https://grouplens.org/datasets/movielens/1m/

신규 고객은 영화를 본 기록이 없기 때문에 어떤 방식으로 추천을 할까 고민했고 다음과 같은 방법을 사용했습니다.
고객을 N개의 class로 clustering하고 신규 고객이 어떤 class에 가장 가까운지 파악한 후 해당하는 class의 고객들이 가장 많이 평가하고, 가장 높게 평가한 영상물을 추천하도록 했습니다.

1. 고객의 개인정보(나이, 성별, 직업)을 활용하여 clustering을 했습니다. 성별, 직업이 범주형 데이터이기 때문에 kmeans가 아닌 kmodes를 이용해서 clustering을 하였습니다. 이를 통해 kmodes 모델을 학습해 kmode.joblib로 저장했고 기존 고객과 그 고객에게 할당된 class 를 account_cluster.csv로 저장했습니다.  (kmodes.ipynb)
+) kmodes 모델의 hyperparameter로 class의 개수를 설정할 수 있는데 많은 cluster를 하고 싶었으나 데이터 수가 적기 때문에 8개로 설정했습니다. 

3. cluster.sql을 통해 고객과 cluster를 저장하는 새로운 테이블을 만들고 psql에서 "\copy cluster(Cluster, account_id) from '~/DB_project/data_final/account_cluster.csv' DELIMITER ',' csv header;" 를 이용해 데이터를 insert했습니다.

4. cluster_movie.sql에 있는 query들을 통해 어떤 cluster에 해당하는 사람들이 어떤 영화를 얼마나 봤고(count) 평가한 평균 점수가 얼마인지(avg)를 모두 저장하고 있는 view 'cluster_movie_count_avg'를 생성했습니다.

5. src/service/RecommendationService.java에 give_recommedation 메소드에는 신규 가입한 account 객체를 받으면 객체의 나이, 성별, 직업을 추출하고 위에서 학습한 kmodes 모델을 이용해서 신규 고객에게 적절한 class를 할당했습니다. (predict_cluster.py)

6. 적절한 query문을 이용해 신규 고객이 해당하는 class의 사람들이 가장 많이 본 영상물, 가장 높게 평가한 영상물 각각 두개를 추천했습니다.

7. JEP 를 이용해서 java환경에서 파이썬 파일을 실행해서 새로운 고객에 대한 class를 예측했습니다. 다양한 방법이 있지만 JEP를 활용했습니다. 혹시 더 나은 방법이 있다면 알려주시면 감사하겠습니다:)




